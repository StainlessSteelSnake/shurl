// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/grpc.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShurlService_PostLongUrl_FullMethodName       = "/grpc_server.ShurlService/PostLongUrl"
	ShurlService_GetLongUrl_FullMethodName        = "/grpc_server.ShurlService/GetLongUrl"
	ShurlService_PostLongUrls_FullMethodName      = "/grpc_server.ShurlService/PostLongUrls"
	ShurlService_GetLongUrlsByUser_FullMethodName = "/grpc_server.ShurlService/GetLongUrlsByUser"
	ShurlService_Delete_FullMethodName            = "/grpc_server.ShurlService/Delete"
	ShurlService_Ping_FullMethodName              = "/grpc_server.ShurlService/Ping"
	ShurlService_Stats_FullMethodName             = "/grpc_server.ShurlService/Stats"
)

// ShurlServiceClient is the client API for ShurlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShurlServiceClient interface {
	PostLongUrl(ctx context.Context, in *PostLongUrlRequest, opts ...grpc.CallOption) (*PostLongUrlResponse, error)
	GetLongUrl(ctx context.Context, in *GetLongUrlRequest, opts ...grpc.CallOption) (*GetLongUrlResponse, error)
	PostLongUrls(ctx context.Context, in *PostLongUrlsRequest, opts ...grpc.CallOption) (*PostLongUrlsResponse, error)
	GetLongUrlsByUser(ctx context.Context, in *GetLongUrlsByUserRequest, opts ...grpc.CallOption) (*GetLongUrlsByUserResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
}

type shurlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShurlServiceClient(cc grpc.ClientConnInterface) ShurlServiceClient {
	return &shurlServiceClient{cc}
}

func (c *shurlServiceClient) PostLongUrl(ctx context.Context, in *PostLongUrlRequest, opts ...grpc.CallOption) (*PostLongUrlResponse, error) {
	out := new(PostLongUrlResponse)
	err := c.cc.Invoke(ctx, ShurlService_PostLongUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shurlServiceClient) GetLongUrl(ctx context.Context, in *GetLongUrlRequest, opts ...grpc.CallOption) (*GetLongUrlResponse, error) {
	out := new(GetLongUrlResponse)
	err := c.cc.Invoke(ctx, ShurlService_GetLongUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shurlServiceClient) PostLongUrls(ctx context.Context, in *PostLongUrlsRequest, opts ...grpc.CallOption) (*PostLongUrlsResponse, error) {
	out := new(PostLongUrlsResponse)
	err := c.cc.Invoke(ctx, ShurlService_PostLongUrls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shurlServiceClient) GetLongUrlsByUser(ctx context.Context, in *GetLongUrlsByUserRequest, opts ...grpc.CallOption) (*GetLongUrlsByUserResponse, error) {
	out := new(GetLongUrlsByUserResponse)
	err := c.cc.Invoke(ctx, ShurlService_GetLongUrlsByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shurlServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, ShurlService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shurlServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, ShurlService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shurlServiceClient) Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, ShurlService_Stats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShurlServiceServer is the server API for ShurlService service.
// All implementations must embed UnimplementedShurlServiceServer
// for forward compatibility
type ShurlServiceServer interface {
	PostLongUrl(context.Context, *PostLongUrlRequest) (*PostLongUrlResponse, error)
	GetLongUrl(context.Context, *GetLongUrlRequest) (*GetLongUrlResponse, error)
	PostLongUrls(context.Context, *PostLongUrlsRequest) (*PostLongUrlsResponse, error)
	GetLongUrlsByUser(context.Context, *GetLongUrlsByUserRequest) (*GetLongUrlsByUserResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Stats(context.Context, *StatsRequest) (*StatsResponse, error)
	mustEmbedUnimplementedShurlServiceServer()
}

// UnimplementedShurlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShurlServiceServer struct {
}

func (UnimplementedShurlServiceServer) PostLongUrl(context.Context, *PostLongUrlRequest) (*PostLongUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLongUrl not implemented")
}
func (UnimplementedShurlServiceServer) GetLongUrl(context.Context, *GetLongUrlRequest) (*GetLongUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLongUrl not implemented")
}
func (UnimplementedShurlServiceServer) PostLongUrls(context.Context, *PostLongUrlsRequest) (*PostLongUrlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLongUrls not implemented")
}
func (UnimplementedShurlServiceServer) GetLongUrlsByUser(context.Context, *GetLongUrlsByUserRequest) (*GetLongUrlsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLongUrlsByUser not implemented")
}
func (UnimplementedShurlServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedShurlServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShurlServiceServer) Stats(context.Context, *StatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedShurlServiceServer) mustEmbedUnimplementedShurlServiceServer() {}

// UnsafeShurlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShurlServiceServer will
// result in compilation errors.
type UnsafeShurlServiceServer interface {
	mustEmbedUnimplementedShurlServiceServer()
}

func RegisterShurlServiceServer(s grpc.ServiceRegistrar, srv ShurlServiceServer) {
	s.RegisterService(&ShurlService_ServiceDesc, srv)
}

func _ShurlService_PostLongUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLongUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShurlServiceServer).PostLongUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShurlService_PostLongUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShurlServiceServer).PostLongUrl(ctx, req.(*PostLongUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShurlService_GetLongUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLongUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShurlServiceServer).GetLongUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShurlService_GetLongUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShurlServiceServer).GetLongUrl(ctx, req.(*GetLongUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShurlService_PostLongUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLongUrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShurlServiceServer).PostLongUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShurlService_PostLongUrls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShurlServiceServer).PostLongUrls(ctx, req.(*PostLongUrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShurlService_GetLongUrlsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLongUrlsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShurlServiceServer).GetLongUrlsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShurlService_GetLongUrlsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShurlServiceServer).GetLongUrlsByUser(ctx, req.(*GetLongUrlsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShurlService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShurlServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShurlService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShurlServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShurlService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShurlServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShurlService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShurlServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShurlService_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShurlServiceServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShurlService_Stats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShurlServiceServer).Stats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShurlService_ServiceDesc is the grpc.ServiceDesc for ShurlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShurlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_server.ShurlService",
	HandlerType: (*ShurlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostLongUrl",
			Handler:    _ShurlService_PostLongUrl_Handler,
		},
		{
			MethodName: "GetLongUrl",
			Handler:    _ShurlService_GetLongUrl_Handler,
		},
		{
			MethodName: "PostLongUrls",
			Handler:    _ShurlService_PostLongUrls_Handler,
		},
		{
			MethodName: "GetLongUrlsByUser",
			Handler:    _ShurlService_GetLongUrlsByUser_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ShurlService_Delete_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ShurlService_Ping_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _ShurlService_Stats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc.proto",
}
